/*
* Copyright (c) 2013, Marcus Liebhardt, Yujin Robot.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above copyright
* notice, this list of conditions and the following disclaimer in the
* documentation and/or other materials provided with the distribution.
* * Neither the name of Yujin Robot nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * Inspired by the openni_tracker by Tim Field and PrimeSense's NiTE 2.0 - Simple Skeleton Sample
 */

#include <ros/ros.h>
#include <ros/package.h>
#include <tf/transform_broadcaster.h>
#include <kdl/frames.hpp>




//#include <OpenNI.h>
//#include <XnCodecIDs.h>
//#include <XnCppWrapper.h>
#include <NiTE.h>
#include <tracker_movement/Tracker.h>
using std::string;

//xn::Context        g_Context;
//xn::DepthGenerator g_DepthGenerator;
//xn::UserGenerator  g_UserGenerator;


int main(int argc, char **argv) {

    printf("Viejo\n");
    ros::init(argc, argv, "tracker_movement");
	if(!ros::ok())
  	{
		ROS_ERROR("Could'initialize node");
    	exit(1); //TODO cambiar por salida de errores
  	}

	ros::NodeHandle nh, nh_priv("~");
	ros::Publisher gripper_pub = nh.advertise<std_msgs::String>("/RosAria/cmd_gripper", 1000);
	openni::Device kinect;
	openni::Status openniStatus = openni::OpenNI::initialize();
	if (openniStatus != openni::STATUS_OK)
	{
		ROS_ERROR("Failed to initialize OpenNI\n%s\n", openni::OpenNI::getExtendedError());
		exit(3);
	}

	const char* deviceUri = openni::ANY_DEVICE;
	bool points = false;
	for (int i = 1; i < argc; ++i)
	{
		if (strcmp(argv[i], "-device") == 0)
		{
			deviceUri = argv[i+1];
			ROS_INFO("Using a oni file: %s", deviceUri);
		}
		else{
			if(strcmp(argv[i], "-points" ) == 0){
				points = true;
				ROS_INFO_STREAM("Showing skeleton's joints");
			}
		}
	}

	openniStatus = kinect.open(deviceUri);

	if (openniStatus != openni::STATUS_OK)
	{

		ROS_ERROR("Failed to open device\n%s\n", openni::OpenNI::getExtendedError());
		return openniStatus;
	}

	if (openniStatus != openni::STATUS_OK)
	{
		ROS_ERROR("Failed to open device\n%s\n", openni::OpenNI::getExtendedError());
		exit(3);
	}

    Tracker tracker = new Tracker(points);
	nite::Status niteStatus = tracker.initialize(&kinect);
	if (niteStatus != nite::STATUS_OK)
	{
		cerr << "Couldn't create user tracker" << endl ;
		exit(3); //TODO cambiar por salida de errores
	}
	ROS_INFO_STREAM("Start moving around to get detected... (PSI pose may be required for skeleton calibration, depending on the configuration)" );

	ros::Rate r(10);
//    std::string frame_id("openni_depth_frame");
//    nh_priv.getParam("camera_frame_id", frame_id);


	while (ros::ok())
	{
		std_msgs::String cmdGripper;

		std::stringstream ss;
		ss << "";
		cmdGripper.data = ss.str();
		niteStatus = tracker.run(cmdGripper);
		if(niteStatus != nite::STATUS_OK){
			cerr << "Something is worng in function run..." << endl;
			exit(3);
		}
		if(cmdGripper.data != ""){
			ROS_INFO_STREAM("Send to /RosAria/cmd_gripper the value " << cmdGripper.data);
			gripper_pub.publish(cmdGripper);
		}
		r.sleep();
	}
	openni::OpenNI::shutdown();
	return 0;
}
